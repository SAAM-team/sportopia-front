[{"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\index.js":"1","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\App.js":"2","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\store\\index.js":"3","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reportWebVitals.js":"4","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\circle\\circle.js":"5","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\header\\header.js":"6","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\category-prods\\category-prods.js":"7","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\cart\\cart.js":"8","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\products\\products.js":"9","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\signin.js":"10","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\seller\\seller.js":"11","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\admin\\index.js":"12","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\favorite\\favorite.js":"13","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\singleProduct\\singleProduct.js":"14","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\context\\global-state.js":"15","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\products-reducer.js":"16","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\cart-reducer.js":"17","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\categories-reducer.js":"18","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\favorite-reducer.js":"19","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\seller-reducer.js":"20","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\admin_reducer.js":"21","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\bidding\\bidding-main.js":"22","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\bidding.js":"23","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\bidding\\bidding-room.js":"24","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\favorit-action.js":"25","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\categories-action.js":"26","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\cart-action.js":"27","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\seller_actions.js":"28","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\admin-count-actions.js":"29","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\admin_actions.js":"30","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\auth\\auth.js":"31","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\if\\if.js":"32","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\product-action .js":"33","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\actions.js":"34","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\carousel\\carousel.js":"35"},{"size":770,"mtime":1608046164425,"results":"36","hashOfConfig":"37"},{"size":1668,"mtime":1608046164376,"results":"38","hashOfConfig":"37"},{"size":690,"mtime":1608046164458,"results":"39","hashOfConfig":"37"},{"size":375,"mtime":1608046164457,"results":"40","hashOfConfig":"37"},{"size":1353,"mtime":1608046164387,"results":"41","hashOfConfig":"37"},{"size":14589,"mtime":1608113332151,"results":"42","hashOfConfig":"37"},{"size":3962,"mtime":1608050478752,"results":"43","hashOfConfig":"37"},{"size":4102,"mtime":1608046164384,"results":"44","hashOfConfig":"37"},{"size":5276,"mtime":1608115921353,"results":"45","hashOfConfig":"37"},{"size":20589,"mtime":1608046164423,"results":"46","hashOfConfig":"37"},{"size":12045,"mtime":1608046164422,"results":"47","hashOfConfig":"37"},{"size":26112,"mtime":1608046164379,"results":"48","hashOfConfig":"37"},{"size":4429,"mtime":1608119386205,"results":"49","hashOfConfig":"37"},{"size":3318,"mtime":1608046164423,"results":"50","hashOfConfig":"37"},{"size":3194,"mtime":1608046164423,"results":"51","hashOfConfig":"37"},{"size":1488,"mtime":1608046164455,"results":"52","hashOfConfig":"37"},{"size":949,"mtime":1608046164451,"results":"53","hashOfConfig":"37"},{"size":628,"mtime":1608046164453,"results":"54","hashOfConfig":"37"},{"size":795,"mtime":1608119737719,"results":"55","hashOfConfig":"37"},{"size":360,"mtime":1608046164456,"results":"56","hashOfConfig":"37"},{"size":1252,"mtime":1608046164449,"results":"57","hashOfConfig":"37"},{"size":4966,"mtime":1608111949461,"results":"58","hashOfConfig":"37"},{"size":1299,"mtime":1608111949466,"results":"59","hashOfConfig":"37"},{"size":8563,"mtime":1608111949462,"results":"60","hashOfConfig":"37"},{"size":2071,"mtime":1608119886550,"results":"61","hashOfConfig":"37"},{"size":618,"mtime":1608046164452,"results":"62","hashOfConfig":"37"},{"size":1313,"mtime":1608046164451,"results":"63","hashOfConfig":"37"},{"size":2419,"mtime":1608046164457,"results":"64","hashOfConfig":"37"},{"size":2985,"mtime":1608046164426,"results":"65","hashOfConfig":"37"},{"size":7432,"mtime":1608046164426,"results":"66","hashOfConfig":"37"},{"size":559,"mtime":1608046164378,"results":"67","hashOfConfig":"37"},{"size":472,"mtime":1608046164425,"results":"68","hashOfConfig":"37"},{"size":1205,"mtime":1608046164455,"results":"69","hashOfConfig":"37"},{"size":1616,"mtime":1608111949464,"results":"70","hashOfConfig":"37"},{"size":2326,"mtime":1608046164383,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"k8g2gr",{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\index.js",[],["157","158"],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\App.js",["159"],"import Header from './components/header/header';\r\nimport Products from './components/products/products';\r\nimport { EachCategory } from './components/circle/circle';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport CategoryProds from './components/category-prods/category-prods';\r\nimport BiddingMain from './components/bidding/bidding-main';\r\nimport BiddingRoom from './components/bidding/bidding-room';\r\nimport GlobalState from './context/global-state';\r\nimport SignIn from './components/signin';\r\nimport Admin from './components/admin/index';\r\nimport Cart from './components/cart/cart';\r\nimport Favorite from './components/favorite/favorite';\r\nimport SingleProduct from './components/singleProduct/singleProduct';\r\nimport Seller from './components/seller/seller';\r\n// Component\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <GlobalState>\r\n          <Header />\r\n          <Switch>\r\n            <Route path='/cart' component={Cart} />\r\n            <Route exact path='/' component={Products} />\r\n            <Route exact path='/register' component={SignIn} />\r\n            <Route exact path='/bidding' component={BiddingMain} />\r\n            <Route path='/bidding/:id' component={BiddingRoom} />\r\n            <Route path='/admin' component={Admin} />\r\n            <Route path='/category/:id' component={CategoryProds} />\r\n            <Route path='/favorite' component={Favorite} />\r\n            <Route path='/product/:id' component={SingleProduct} />\r\n            <Route path='/seller' component={Seller} />\r\n          </Switch>\r\n        </GlobalState>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\store\\index.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reportWebVitals.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\circle\\circle.js",["160"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './circle.css';\r\nimport $ from 'jquery';\r\n\r\nexport const EachCategory = () => {\r\n  $('#header').each(function () {\r\n    $('#header').toggleClass('hide');\r\n  });\r\n  return (\r\n    <div>\r\n      <header id='header'>\r\n        <div className='inner'>\r\n          <div className='content'>\r\n            <h1>Bids Item</h1>\r\n            <h2>Check the active auctions </h2>\r\n            <a\r\n              href='#'\r\n              className='button big alt'\r\n              onClick={() =>\r\n                $('#header').each(function () {\r\n                  $('#header').toggleClass('hide');\r\n                })\r\n              }\r\n            >\r\n              <button>Let's Go</button>\r\n            </a>\r\n          </div>\r\n          <a\r\n            href='#'\r\n            className='button hidden'\r\n            onClick={() =>\r\n              $('#header').each(function () {\r\n                $('#header').toggleClass('hide');\r\n              })\r\n            }\r\n          >\r\n            <span>Let's Go</span>\r\n          </a>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EachCategory);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\header\\header.js",["161","162","163","164"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n  getRemoteData,\r\n  activeCategory\r\n} from '../../reducers/categories-action';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {\r\n  List,\r\n  Divider,\r\n  Drawer,\r\n  ListItem,\r\n  ListItemText,\r\n  Fab,\r\n  Tooltip,\r\n  Zoom,\r\n  Menu,\r\n  MenuItem,\r\n  Badge,\r\n  InputBase,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport FavoriteRoundedIcon from '@material-ui/icons/FavoriteRounded';\r\nimport GavelRoundedIcon from '@material-ui/icons/GavelRounded';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport PropTypes from 'prop-types';\r\nimport ShoppingCartRoundedIcon from '@material-ui/icons/ShoppingCartRounded';\r\nimport a1 from './assets/11.gif';\r\nimport a2 from './assets/12.gif';\r\nimport a3 from './assets/13.gif';\r\nimport a4 from './assets/14.gif';\r\nimport a5 from './assets/15.gif';\r\nimport a6 from './assets/16.gif';\r\nimport a7 from './assets/17.gif';\r\nimport a8 from './assets/18.gif';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Auth from '../../auth/auth';\r\nimport cookies from 'react-cookies';\r\nimport { getCartAPI } from '../../reducers/cart-action';\r\nimport { getFavAPI } from '../../reducers/favorit-action';\r\n\r\nconst avatarIcons = [a1, a2, a3, a4, a5, a6, a7, a8];\r\n\r\nfunction ScrollTop(props) {\r\n  const { children, window } = props;\r\n  const classes = useStyles();\r\n\r\n  const trigger = useScrollTrigger({\r\n    target: window ? window() : undefined,\r\n    disableHysteresis: true,\r\n    threshold: 100\r\n  });\r\n\r\n  const handleClick = (event) => {\r\n    const anchor = (event.target.ownerDocument || document).querySelector(\r\n      '#back-to-top-anchor'\r\n    );\r\n\r\n    if (anchor) {\r\n      anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n    }\r\n  };\r\n  return (\r\n    <Zoom in={trigger}>\r\n      <div onClick={handleClick} role='presentation' className={classes.root}>\r\n        {children}\r\n      </div>\r\n    </Zoom>\r\n  );\r\n}\r\nScrollTop.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  window: PropTypes.func\r\n};\r\nlet notDeletedCart = [];\r\nfunction Header(props) {\r\n  // props.cart.map((item)=>{\r\n  //   if (item.is_deleted === false){\r\n  //    return notDeletedCart.push(item)\r\n  //   }\r\n  // })\r\n  console.log('prrrrrrrrr', props);\r\n  // console.log('nnnnnn', notDeletedCart);\r\n\r\n  useEffect(() => {\r\n    props.getRemoteData();\r\n    // props.getCartAPI();\r\n    // props.getFavAPI();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  // start of drawer\r\n  const [state, setState] = React.useState(false);\r\n\r\n  const saveCategoryId = (id) => {\r\n    cookies.save('cId', id);\r\n    props.activeCategory(id);\r\n  };\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      (event.key === 'Tab' || event.key === 'Shift')\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n  const list = (anchor) => (\r\n    <div\r\n      // style={{backgroundColor: '#6BAB90', height: '100%', color:'E1F0C4' }}\r\n      className={classes.list}\r\n      role='presentation'\r\n      onClick={toggleDrawer(anchor, false)}\r\n    >\r\n      <Typography style={{ padding: '10px 0px 5px 10px' }} variant='h4' noWrap>\r\n        Categories\r\n      </Typography>\r\n      <Divider />\r\n      <List>\r\n        {props.categories.map((category, index) => (\r\n          <>\r\n            <NavLink\r\n              color='inherit'\r\n              to={`/category/${category.id}`}\r\n              onClick={() => {\r\n                saveCategoryId(category.id);\r\n                // props.getRemoteData()\r\n              }}\r\n            >\r\n              <ListItem button key={category.id}>\r\n                <ListItemAvatar>\r\n                  <Avatar alt='' src={avatarIcons[index]} />\r\n                </ListItemAvatar>\r\n                <ListItemText primary={category.category_name} />\r\n              </ListItem>\r\n            </NavLink>\r\n            <Divider />\r\n          </>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n  // end of drawer\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <NavLink color='white' to={'/favorite'}>\r\n        <MenuItem>\r\n          <IconButton aria-label='show 4 new mails' color='inherit'>\r\n            <Badge badgeContent={props.favLength} color='secondary'>\r\n              <FavoriteRoundedIcon />\r\n            </Badge>\r\n          </IconButton>\r\n          <p>My Favorite</p>\r\n        </MenuItem>\r\n      </NavLink>\r\n      <NavLink color='white' to={'/cart'}>\r\n        <MenuItem>\r\n          <IconButton aria-label='show 11 new notifications' color='inherit'>\r\n            {/* <Badge badgeContent={0} color='secondary'> */}\r\n            <Badge badgeContent={props.cartLength} color='secondary'>\r\n              <ShoppingCartRoundedIcon />\r\n            </Badge>\r\n          </IconButton>\r\n          <p>My Cart</p>\r\n        </MenuItem>\r\n      </NavLink>\r\n      {/* <MenuItem >\r\n        <IconButton\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <PersonRoundedIcon />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem> */}\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar style={{ backgroundColor: '#157A6E' }} position='static'>\r\n        <Toolbar>\r\n          {/* ..................................burger view ......................................... */}\r\n\r\n          <IconButton\r\n            edge='start'\r\n            className={classes.menuButton}\r\n            color='inherit'\r\n            aria-label='open drawer'\r\n            onClick={toggleDrawer('left', true)}\r\n          >\r\n            <MenuIcon></MenuIcon>\r\n          </IconButton>\r\n          <NavLink to='/'>\r\n            <Typography className={classes.title} variant='h6' noWrap>\r\n              Sportopia\r\n            </Typography>\r\n          </NavLink>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder='Search…'\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n          <div className={classes.grow} />\r\n          <div>\r\n            <React.Fragment key={'left'}>\r\n              <Drawer\r\n                anchor='left'\r\n                open={state['left']}\r\n                onClose={toggleDrawer('left', false)}\r\n              >\r\n                {list('left')}\r\n              </Drawer>\r\n            </React.Fragment>\r\n          </div>\r\n\r\n          {/* ................................icons on nav bar .................................... */}\r\n          <div className={classes.sectionDesktop}>\r\n            <Auth role={'admin'}>\r\n              <NavLink color='inherit' to='/admin'>\r\n                Admin\r\n              </NavLink>\r\n            </Auth>\r\n            <Auth role={'seller'}>\r\n              <NavLink color='inherit' to='/seller'>\r\n                Seller\r\n              </NavLink>\r\n            </Auth>\r\n            <Auth role={'buyer'}>\r\n              <NavLink color='inherit' to='/buyer'>\r\n                Buyer\r\n              </NavLink>\r\n            </Auth>\r\n\r\n            <Tooltip\r\n              placement='top'\r\n              arrow\r\n              TransitionComponent={Zoom}\r\n              title='bids list'\r\n            >\r\n              <IconButton\r\n                aria-label='show 17 new notifications'\r\n                color='inherit'\r\n              >\r\n                <Badge badgeContent={17} color='secondary'>\r\n                  <GavelRoundedIcon />\r\n                </Badge>\r\n              </IconButton>\r\n            </Tooltip>\r\n            <NavLink color='white' to={'/favorite'}>\r\n              <Tooltip\r\n                placement='top'\r\n                arrow\r\n                TransitionComponent={Zoom}\r\n                title='My Favorite'\r\n              >\r\n                <IconButton aria-label='show 4 new mails' color='inherit'>\r\n                  <Badge badgeContent={props.favLength} color='secondary'>\r\n                    <FavoriteRoundedIcon />\r\n                  </Badge>\r\n                </IconButton>\r\n              </Tooltip>\r\n            </NavLink>\r\n            <NavLink color='white' to={'/cart'}>\r\n              <Tooltip\r\n                placement='top'\r\n                arrow\r\n                TransitionComponent={Zoom}\r\n                title='My Cart'\r\n              >\r\n                <IconButton aria-label='show 4 new mails' color='inherit'>\r\n                  {/* <Badge badgeContent={0} color='secondary'> */}\r\n                  <Badge badgeContent={props.cartLength} color='secondary'>\r\n                    <ShoppingCartRoundedIcon />\r\n                  </Badge>\r\n                </IconButton>\r\n              </Tooltip>\r\n            </NavLink>\r\n            <Tooltip\r\n              placement='top'\r\n              arrow\r\n              TransitionComponent={Zoom}\r\n              title='sign in / up'\r\n            >\r\n              <NavLink to='/register'>\r\n                <IconButton\r\n                  edge='end'\r\n                  aria-label='account of current user'\r\n                  aria-controls={menuId}\r\n                  aria-haspopup='true'\r\n                  onClick={handleProfileMenuOpen}\r\n                  color='inherit'\r\n                >\r\n                  <PersonRoundedIcon />\r\n                </IconButton>\r\n              </NavLink>\r\n            </Tooltip>\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label='show more'\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup='true'\r\n              onClick={handleMobileMenuOpen}\r\n              color='inherit'\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Toolbar id='back-to-top-anchor' />\r\n\r\n      {renderMobileMenu}\r\n      {/* {renderMenu} */}\r\n      <ScrollTop {...props}>\r\n        <Fab\r\n          style={{ backgroundColor: '#157A6E' }}\r\n          size='small'\r\n          aria-label='scroll back to top'\r\n        >\r\n          <KeyboardArrowUpIcon />\r\n        </Fab>\r\n      </ScrollTop>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block'\r\n    }\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25)\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto'\r\n    }\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch'\r\n    }\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex'\r\n    }\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  root: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2)\r\n  },\r\n  list: {\r\n    width: 250,\r\n    backgroundColor: '#6BAB90',\r\n    height: '100%',\r\n    color: 'E1F0C4',\r\n    borderBottom: '1px solid black'\r\n  },\r\n  fullList: {\r\n    width: 'auto'\r\n  }\r\n}));\r\n\r\nconst mapStateToProps = (state) => {\r\n  // console.log('state',state.cartData.cartItem.length);\r\n  return {\r\n    categories: state.categories.results,\r\n    cartLength: state.cartData.cartItem.length,\r\n    favLength: state.favoriteData.count\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  getRemoteData,\r\n  activeCategory,\r\n  getCartAPI,\r\n  getFavAPI\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\category-prods\\category-prods.js",["165","166","167","168"],"import { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardHeader, Zoom, Tooltip, Badge } from '@material-ui/core';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ShoppingCartRoundedIcon from '@material-ui/icons/ShoppingCartRounded';\r\nimport FavoriteRoundedIcon from '@material-ui/icons/FavoriteRounded';\r\nimport './category-prods.css';\r\nimport React, { useEffect } from 'react'\r\nimport { activeCategory } from '../../reducers/categories-action';\r\nimport { getRemoteData } from '../../reducers/product-action ';\r\nimport {createFav} from '../../reducers/favorit-action'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 300,\r\n    // maxHeight:500,\r\n    boxShadow: '0 0 10px 0px rgba(0, 0, 0, 0.25)'\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '100%' // 16:9\r\n  },\r\n  header: {\r\n    height: 175,\r\n    // paddingBottom: '0', // 16:9\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\n\r\nconst Products = (props) => {\r\n  useEffect(() => {\r\n    props.getRemoteData();\r\n  }, [])\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Typography style={{ marginLeft: '45%', marginBottom: '20px', color: '#050505' }} variant=\"h3\" noWrap>\r\n        {props.active.category_name}\r\n      </Typography>\r\n      <section className='container'>\r\n\r\n        {props.products.map((product) => {\r\n          return (\r\n            <Card className={classes.root} key={product.id} >\r\n              <CardMedia\r\n                className={classes.media}\r\n                image={product.main_img}\r\n                title={product.id}\r\n              />\r\n              <CardHeader\r\n                className={classes.header}\r\n                title={product.name}\r\n                subheader={product.description}\r\n              />\r\n              <CardActions disableSpacing>\r\n                <CardContent>\r\n                  <Typography\r\n                    variant='body2'\r\n                    color='textSecondary'\r\n                    component='p'\r\n                  >\r\n                    price: {product.price} $\r\n              </Typography>\r\n                </CardContent>\r\n                <Tooltip\r\n                  placement='top'\r\n                  arrow\r\n                  TransitionComponent={Zoom}\r\n                  title='add to favorite'\r\n                  onClick={()=>props.createFav(product)}\r\n                >\r\n                  <IconButton aria-label='show 4 new mails' color='inherit'>\r\n                    <Badge badgeContent={0} color='secondary'>\r\n                      <FavoriteRoundedIcon />\r\n                    </Badge>\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <Tooltip\r\n                  placement='top'\r\n                  arrow\r\n                  TransitionComponent={Zoom}\r\n                  title='add to cart'\r\n                >\r\n                  <IconButton aria-label='show 4 new mails' color='inherit'>\r\n                    <Badge badgeContent={0} color='secondary'>\r\n                      <ShoppingCartRoundedIcon />\r\n                    </Badge>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </CardActions>\r\n            </Card>\r\n\r\n          );\r\n        })}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    products: state.products.activeProducts,\r\n    active: state.categories.active\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { activeCategory, getRemoteData,createFav};\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Products);","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\cart\\cart.js",["169","170","171"],"import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  getCartAPI,\r\n  updateRemoteCart,\r\n  removeFromCart\r\n} from '../../reducers/cart-action';\r\n\r\nimport {\r\n  CardMedia,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  '@global': {\r\n    ul: {\r\n      margin: 0,\r\n      padding: 0,\r\n      listStyle: 'none'\r\n    }\r\n  },\r\n\r\n  appBar: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`\r\n  },\r\n  toolbarTitle: {\r\n    flex: 1\r\n  },\r\n  fullHeight: {\r\n    height: '100%'\r\n  },\r\n  card: {\r\n    margin: '1em'\r\n  },\r\n  // media: {\r\n  //     height: 0,\r\n  //     paddingTop: '56.25%',\r\n  //     borderTopLeftRadius: '5px',\r\n  //     borderTopRightRadius: '5px'\r\n  // },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '100%' // 16:9\r\n  },\r\n  grid2: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexWrap: 'initial'\r\n  },\r\n  jss5: {\r\n    padding: '64px 0px 48px'\r\n  },\r\n  grid1: {\r\n    paddingTop: '24px',\r\n    paddingBottom: '24px'\r\n  }\r\n}));\r\n\r\nconst Cart = (props) => {\r\n  useEffect(() => {\r\n    props.getCartAPI();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Typography style={{ padding: '10px 0px 5px 10px' }} variant='h4' noWrap>\r\n        Cart\r\n      </Typography>\r\n      <section className='container'>\r\n        {props.cartData.cartItem.map((item, idx) => {\r\n          console.log('props', props.cartData.cartItem[idx].is_deleted);\r\n          if (props.cartData.cartItem[idx].is_deleted === false) {\r\n            return (\r\n              <>\r\n                <Container key={idx} maxWidth='md' component='main'>\r\n                  <Grid\r\n                    className={classes.grid1}\r\n                    container\r\n                    spacing={0}\r\n                    direction='row'\r\n                    justify='center'\r\n                    alignItems='center'\r\n                  >\r\n                    <Grid\r\n                      className={classes.grid2}\r\n                      container\r\n                      item\r\n                      xs={6}\r\n                      sm={6}\r\n                      lg={6}\r\n                    >\r\n                      <Card key={idx} className={classes.card}>\r\n                        <CardMedia\r\n                          className={classes.media}\r\n                          image={item.main_img}\r\n                          title={item.id}\r\n                        />\r\n                        <CardContent>\r\n                          <Typography variant='h5' color='textPrimary'>\r\n                            {item.name}\r\n                          </Typography>\r\n                          <Typography variant='p' color='textSecondary'>\r\n                            category: {item.category}\r\n                            <br />\r\n                            price: {item.price}\r\n                          </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <Button\r\n                            key={idx}\r\n                            style={{ fontSize: '0.9rem' }}\r\n                            color='secondary'\r\n                            onClick={() => removeFromCart(item.id)}\r\n                          >\r\n                            Remove\r\n                          </Button>\r\n                        </CardActions>\r\n                      </Card>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Container>\r\n              </>\r\n            );\r\n          }\r\n        })}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//     // length: state.cartItem.length,\r\n//     cartData: state.cartData,\r\n// })\r\nconst mapStateToProps = (state) => {\r\n  // console.log('state inside cart', state);\r\n  return {\r\n    cartData: state.cartData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getCartAPI\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\products\\products.js",["172","173","174"],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\signin.js",["175","176"],"import React, { useState, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  CssBaseline,\r\n  TextField,\r\n  Grid,\r\n  Box,\r\n  Link,\r\n  Typography,\r\n  Container,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel\r\n} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GoogleLogin from 'react-google-login';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport { StateContext } from '../context/global-state';\r\n\r\nexport default function SignIn() {\r\n  // ContextState\r\n\r\n  const stateContext = useContext(StateContext);\r\n  const history = useHistory();\r\n\r\n  // States\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [telephone, setTelephone] = useState('');\r\n  const [companyName, setComapnyName] = useState('');\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [gender, setGender] = useState('');\r\n\r\n  const [logged, setLoginState] = useState(false);\r\n  const [register, setRegister] = useState(false);\r\n  const [registerBuyer, setRegisterBuyer] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // Functions\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const responseGoogle = (response) => {\r\n    console.log(response);\r\n  };\r\n  const responseFacebook = (response) => {\r\n    console.log(response);\r\n  };\r\n\r\n  async function handleSignIn(event) {\r\n    event.preventDefault();\r\n    stateContext.login(username, password);\r\n    if (!stateContext.error) history.push('/');\r\n  }\r\n  async function handleSignUp(event, role) {\r\n    event.preventDefault();\r\n    const objBody = {\r\n      username: username,\r\n      password: password,\r\n      role: role,\r\n      companyname: companyName,\r\n      firstname: firstName,\r\n      lastname: lastName,\r\n      adress: address,\r\n      gender: gender,\r\n      telephone: telephone\r\n    };\r\n    stateContext.register(objBody);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container component='main' maxWidth='xs'>\r\n        {register ? (\r\n          <Card>\r\n            <CardContent>\r\n              <CssBaseline />\r\n              <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                  <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component='h1' variant='h4'>\r\n                  Sign Up\r\n                </Typography>\r\n                <Link\r\n                  component='button'\r\n                  onClick={() => {\r\n                    setRegister(!register);\r\n                  }}\r\n                  style={{ marginBottom: '0%', marginTop: '5%' }}\r\n                >\r\n                  Existing User? Sign In here!\r\n                </Link>\r\n\r\n                <form className={classes.form}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Button\r\n                        style={{ minHeight: 50 }}\r\n                        type='button'\r\n                        fullWidth\r\n                        variant='contained'\r\n                        color='secondary'\r\n                        className={classes.submit}\r\n                        onClick={() => {\r\n                          setRegisterBuyer(true);\r\n                          handleClickOpen();\r\n                        }}\r\n                      >\r\n                        Buyer\r\n                      </Button>\r\n                    </Grid>\r\n                    <Dialog\r\n                      open={open}\r\n                      onClose={handleClose}\r\n                      aria-labelledby='form-dialog-title'\r\n                    >\r\n                      <DialogTitle id='form-dialog-title'>\r\n                        {registerBuyer\r\n                          ? 'Sign Up as a Buyer'\r\n                          : 'Sign Up as a Seller'}\r\n                      </DialogTitle>\r\n                      <DialogContent>\r\n                        {registerBuyer ? (\r\n                          <form className={classes.form}>\r\n                            <Grid\r\n                              container\r\n                              spacing={1}\r\n                              style={{\r\n                                marginBottom: 20\r\n                              }}\r\n                            >\r\n                              <Grid item xs={2} sm={2.7}></Grid>\r\n                              <Grid item xs={1} sm={5}>\r\n                                <GoogleLogin\r\n                                  clientId='1017961095121-u3na2ktuf9i8m0s7ndq0l9ishqpsbfst.apps.googleusercontent.com'\r\n                                  buttonText='Signup'\r\n                                  onSuccess={responseGoogle}\r\n                                  onFailure={responseGoogle}\r\n                                  cookiePolicy={'single_host_origin'}\r\n                                  style={{\r\n                                    borderRightWidth: 1,\r\n                                    borderRightColor: 'black'\r\n                                  }}\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={1} sm={4}>\r\n                                <FacebookLogin\r\n                                  appId='562118384400275'\r\n                                  fields='name,username,picture'\r\n                                  scope='public_profile,user_friends'\r\n                                  callback={responseFacebook}\r\n                                  icon='fa-facebook'\r\n                                  textButton='SignUp'\r\n                                  size='small'\r\n                                />\r\n                              </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={2}>\r\n                              <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                  name='userName'\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  id='userName'\r\n                                  label='User Name'\r\n                                  onChange={(e) => setUsername(e.target.value)}\r\n                                  autoFocus\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                  type='password'\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setPassword(e.target.value)}\r\n                                  id='password'\r\n                                  label='Password'\r\n                                  name='password'\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                  name='firstName'\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  id='firstName'\r\n                                  label='First Name'\r\n                                  onChange={(e) => setFirstName(e.target.value)}\r\n                                  autoFocus\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={2} sm={6}>\r\n                                <TextField\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setLastName(e.target.value)}\r\n                                  id='lastName'\r\n                                  label='Last Name'\r\n                                  name='lastName'\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={2} sm={12}>\r\n                                <TextField\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setAddress(e.target.value)}\r\n                                  id='address'\r\n                                  label='Address'\r\n                                  name='address'\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={2} sm={8}>\r\n                                <RadioGroup\r\n                                  row\r\n                                  aria-label='gender'\r\n                                  name='gender1'\r\n                                  value={gender}\r\n                                  onChange={(e) => setGender(e.target.value)}\r\n                                >\r\n                                  <FormControlLabel\r\n                                    value='female'\r\n                                    control={<Radio />}\r\n                                    label='Female'\r\n                                  />\r\n                                  <FormControlLabel\r\n                                    value='male'\r\n                                    control={<Radio />}\r\n                                    label='Male'\r\n                                  />\r\n                                  <FormControlLabel\r\n                                    value='other'\r\n                                    control={<Radio />}\r\n                                    label='Other'\r\n                                  />\r\n                                </RadioGroup>\r\n                              </Grid>\r\n                              <Grid item xs={2} sm={4}>\r\n                                <TextField\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setTelephone(e.target.value)}\r\n                                  id='telephone'\r\n                                  label='Telephone'\r\n                                  name='telephone'\r\n                                />\r\n                              </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                              type='submit'\r\n                              fullWidth\r\n                              variant='contained'\r\n                              color='primary'\r\n                              className={classes.submit}\r\n                              onClick={(event) => handleSignUp(event, 'buyer')}\r\n                            >\r\n                              Sign Up\r\n                            </Button>\r\n                            <Typography\r\n                              style={{ fontSize: 15 }}\r\n                              component='h5'\r\n                              variant='h5'\r\n                            >\r\n                              {stateContext.success\r\n                                ? stateContext.success\r\n                                : stateContext.error}\r\n                            </Typography>\r\n                          </form>\r\n                        ) : (\r\n                          <form className={classes.form}>\r\n                            <Grid container spacing={2}>\r\n                              <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                  name='userName'\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  id='userName'\r\n                                  label='User Name'\r\n                                  onChange={(e) => setUsername(e.target.value)}\r\n                                  autoFocus\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                  type='password'\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setPassword(e.target.value)}\r\n                                  id='password'\r\n                                  label='Password'\r\n                                  name='password'\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                  name='companyName'\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  id='companyName'\r\n                                  label='Company Name'\r\n                                  onChange={(e) =>\r\n                                    setComapnyName(e.target.value)\r\n                                  }\r\n                                  autoFocus\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={2} sm={6}>\r\n                                <TextField\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setTelephone(e.target.value)}\r\n                                  id='telephone'\r\n                                  label='Telephone'\r\n                                  name='telephone'\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={2} sm={12}>\r\n                                <TextField\r\n                                  variant='outlined'\r\n                                  required\r\n                                  fullWidth\r\n                                  onChange={(e) => setAddress(e.target.value)}\r\n                                  id='address'\r\n                                  label='Address'\r\n                                  name='address'\r\n                                />\r\n                              </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                              type='submit'\r\n                              fullWidth\r\n                              variant='contained'\r\n                              color='primary'\r\n                              className={classes.submit}\r\n                              onClick={(event) => handleSignUp(event, 'seller')}\r\n                            >\r\n                              Sign Up\r\n                            </Button>\r\n                          </form>\r\n                        )}\r\n                      </DialogContent>\r\n                    </Dialog>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Button\r\n                        style={{ minHeight: 50 }}\r\n                        type='button'\r\n                        fullWidth\r\n                        variant='contained'\r\n                        color='secondary'\r\n                        className={classes.submit}\r\n                        onClick={() => {\r\n                          setRegisterBuyer(false);\r\n                          handleClickOpen();\r\n                        }}\r\n                      >\r\n                        Seller\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </form>\r\n              </div>\r\n              <Box mt={5}></Box>\r\n            </CardContent>\r\n          </Card>\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <CssBaseline />\r\n              <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                  <LockOpenOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component='h1' variant='h4'>\r\n                  Sign In\r\n                </Typography>\r\n                <Link\r\n                  component='button'\r\n                  onClick={() => {\r\n                    setRegister(true);\r\n                  }}\r\n                  style={{ marginBottom: '10%', marginTop: '5%' }}\r\n                >\r\n                  New User? Sign up here!\r\n                </Link>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={2} sm={2.7}></Grid>\r\n                  <Grid item xs={1} sm={5}>\r\n                    <GoogleLogin\r\n                      clientId='1017961095121-u3na2ktuf9i8m0s7ndq0l9ishqpsbfst.apps.googleusercontent.com'\r\n                      buttonText='Login'\r\n                      onSuccess={responseGoogle}\r\n                      onFailure={responseGoogle}\r\n                      cookiePolicy={'single_host_origin'}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={1} sm={4}>\r\n                    <FacebookLogin\r\n                      appId='562118384400275'\r\n                      fields='name,username,picture'\r\n                      scope='public_profile,user_friends'\r\n                      callback={responseFacebook}\r\n                      icon='fa-facebook'\r\n                      textButton='Login'\r\n                      size='small'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Typography component='h1' variant='h5'>\r\n                  Or\r\n                </Typography>\r\n                <form className={classes.form}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        name='userName'\r\n                        variant='outlined'\r\n                        required\r\n                        fullWidth\r\n                        id='userName'\r\n                        label='User Name'\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        autoFocus\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        type='password'\r\n                        variant='outlined'\r\n                        required\r\n                        fullWidth\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        id='password'\r\n                        label='Password'\r\n                        name='password'\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Button\r\n                    type='submit'\r\n                    fullWidth\r\n                    variant='contained'\r\n                    color='primary'\r\n                    className={classes.submit}\r\n                    onClick={(event) => handleSignIn(event)}\r\n                  >\r\n                    Sign In\r\n                  </Button>\r\n                </form>\r\n                <Typography\r\n                  style={{ color: 'red', fontSize: 15 }}\r\n                  component='h5'\r\n                  variant='h5'\r\n                >\r\n                  {stateContext.error}\r\n                </Typography>\r\n              </div>\r\n              <Box mt={5}></Box>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\seller\\seller.js",["177","178","179"],"/* eslint-disable no-lone-blocks */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { If, Then, Else } from '../../if/if';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  ListItem,\r\n  Divider,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  FormControlLabel,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  ListItemText,\r\n  Fab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Avatar,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n  Switch\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addProduct,\r\n  deleteProduct,\r\n  updateProduct,\r\n  allSellerProducts\r\n} from '../../reducers/seller_actions';\r\n// Table Info\r\nlet rowP = [];\r\nexport function Seller(props) {\r\n  console.log('first Line');\r\n  const [keys, setKeys] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [product, setProduct] = useState({\r\n    name: '',\r\n    description: '',\r\n    main_img: '',\r\n    images: [],\r\n    price: 0,\r\n    quantity: 0,\r\n    category_id: '',\r\n    id_bid: false\r\n  });\r\n\r\n  // Effect\r\n  useEffect(() => {\r\n    rowP = [];\r\n    setKeys(Object.keys(props.products[0]));\r\n    props.products.forEach((item) => {\r\n      {\r\n        rowP.push(\r\n          createPData(\r\n            item.id,\r\n            item.name,\r\n            item.description,\r\n            item.main_img,\r\n            item.price,\r\n            item.quantity,\r\n            item.category_id,\r\n            item.id_bid\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }, [props.products]);\r\n\r\n  useEffect(() => {\r\n    handleGetAllProducts();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  // Functions\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleDeleteProduct = (id) => {\r\n    props.deleteProduct(id);\r\n  };\r\n  const handleUpdateProduct = (id) => {\r\n    props.updateProduct(product, id);\r\n  };\r\n  const handleGetAllProducts = () => {\r\n    props.allSellerProducts();\r\n  };\r\n  const handleAddProduct = () => {\r\n    props.addProduct(product);\r\n  };\r\n  const generateList = () => {\r\n    return (\r\n      <Grid item xs={12}>\r\n        <ListItem button>\r\n          <Avatar className={classes.purple}>S</Avatar>\r\n          <ListItemText primary='Seller' />\r\n          <Divider />\r\n        </ListItem>\r\n      </Grid>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Tooltip title='Add Product'>\r\n        <Fab\r\n          style={{ position: 'absolute', top: 70, right: 30 }}\r\n          color='primary'\r\n          aria-label='add'\r\n        >\r\n          <AddIcon onClick={handleClickOpen} />\r\n        </Fab>\r\n      </Tooltip>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n      >\r\n        <DialogTitle id='form-dialog-title'>Adding Product</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>Adding New Product</DialogContentText>\r\n          <form className={classes.form}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  name='productName'\r\n                  variant='outlined'\r\n                  required\r\n                  fullWidth\r\n                  id='productName'\r\n                  label='Product Name'\r\n                  onChange={(e) => product.name(e.target.value)}\r\n                  autoFocus\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant='outlined'\r\n                  required\r\n                  fullWidth\r\n                  onChange={(e) => product.description(e.target.value)}\r\n                  id='description'\r\n                  label='description'\r\n                  name='description'\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  name='price'\r\n                  variant='outlined'\r\n                  required\r\n                  fullWidth\r\n                  id='price'\r\n                  label='Price'\r\n                  onChange={(e) => product.price(e.target.value)}\r\n                  autoFocus\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  variant='outlined'\r\n                  required\r\n                  fullWidth\r\n                  onChange={(e) => product.quantity(e.target.value)}\r\n                  id='quantity'\r\n                  label='Quantity'\r\n                  name='quantity'\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      onChange={(e) => product.id_bid(e.target.checked)}\r\n                      name='checkedA'\r\n                    />\r\n                  }\r\n                  label='On Bidding'\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel id='demo-simple-select-label'>\r\n                    Category\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId='demo-simple-select-label'\r\n                    id='demo-simple-select'\r\n                    onChange={(e) => product.category_id(e.target.value)}\r\n                  >\r\n                    <MenuItem value={1}>Category1</MenuItem>\r\n                    <MenuItem value={2}>Category2</MenuItem>\r\n                    <MenuItem value={3}>Category3</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => handleAddProduct()} color='primary'>\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Grid\r\n        xs={12}\r\n        container\r\n        direction='row'\r\n        justify='space-between'\r\n        alignItems='flex-start'\r\n      >\r\n        <Grid\r\n          lg={2}\r\n          xs={12}\r\n          container\r\n          direction='column'\r\n          justify='space-between'\r\n          alignItems='flex-start'\r\n        >\r\n          {generateList()}\r\n        </Grid>\r\n        <Grid\r\n          lg={10}\r\n          xs={12}\r\n          container\r\n          direction='column'\r\n          justify='space-between'\r\n          alignItems='flex-start'\r\n        >\r\n          <Grid item xs={12} container direction='row'>\r\n            <TableContainer style={{ marginRight: 15 }} component={Paper}>\r\n              <Table className={classes.table} aria-label='customized table'>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {keys.map((key) => {\r\n                      return (\r\n                        <StyledTableCell align='center' key={key}>\r\n                          {key}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                    <StyledTableCell align='center' key='Update'>\r\n                      Update\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center' key='Delete'>\r\n                      Delete\r\n                    </StyledTableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <If condition={rowP.length}>\r\n                    <Then>\r\n                      {rowP.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                          <StyledTableCell\r\n                            align='center'\r\n                            component='th'\r\n                            scope='row'\r\n                          >\r\n                            {row.name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.description}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            <Avatar\r\n                              alt='Product Image'\r\n                              src={row.main_img}\r\n                              className={classes.large}\r\n                            />\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.price} $\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.category_id}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.company_name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            <Button\r\n                              fullWidth\r\n                              variant='contained'\r\n                              color='primary'\r\n                              className={classes.submit}\r\n                              onClick={(event) => handleDeleteProduct(row.id)}\r\n                            >\r\n                              Delete\r\n                            </Button>\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            <Button\r\n                              fullWidth\r\n                              variant='contained'\r\n                              color='primary'\r\n                              className={classes.submit}\r\n                              onClick={(event) =>\r\n                                handleUpdateProduct(product, row.id)\r\n                              }\r\n                            >\r\n                              Update\r\n                            </Button>{' '}\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </Then>\r\n                  </If>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary\r\n  },\r\n  table: {\r\n    minWidth: 700\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7)\r\n  },\r\n  purple: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n    marginRight: 5\r\n  },\r\n  list: {\r\n    padding: 5\r\n  }\r\n}));\r\n// Table Functions\r\nfunction createPData(\r\n  name,\r\n  description,\r\n  main_img,\r\n  price,\r\n  category_id,\r\n  quantity,\r\n  id_bid\r\n) {\r\n  return {\r\n    name,\r\n    description,\r\n    main_img,\r\n    price,\r\n    category_id,\r\n    quantity,\r\n    id_bid\r\n  };\r\n}\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white\r\n  },\r\n  body: {\r\n    fontSize: 14\r\n  }\r\n}))(TableCell);\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover\r\n    }\r\n  }\r\n}))(TableRow);\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log('state in the seller', state);\r\n  return {\r\n    products: state.seller.sellersProducts\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  addProduct,\r\n  deleteProduct,\r\n  updateProduct,\r\n  allSellerProducts\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Seller);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\admin\\index.js",["180","181","182","183","184","185","186","187"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { StateContext } from '../../context/global-state';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { If, Then, Else } from '../../if/if';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\nimport { Card, Row, Col, PageItem } from 'react-bootstrap';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  ListItem,\r\n  Divider,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  ListItemText,\r\n  Fab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Avatar,\r\n  Tooltip\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { connect } from 'react-redux';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nimport {\r\n  allSellers,\r\n  allActiveSellers,\r\n  allDeActiveSellers,\r\n  allBuyers,\r\n  allActiveBuyers,\r\n  allDeActiveBuyers,\r\n  allProducts,\r\n  allDProducts,\r\n  allAProducts,\r\n  allBProducts,\r\n  allCProducts,\r\n  addCategory,\r\n  numberOfUsers,\r\n  numberOfProducts,\r\n  toggleUser,\r\n  toggleProduct\r\n} from '../../reducers/admin_actions';\r\n\r\nimport {\r\n  sellers,\r\n  dSellers,\r\n  aSellers,\r\n  buyers,\r\n  aBuyers,\r\n  dBuyers,\r\n  products,\r\n  dProducts,\r\n  aProducts,\r\n  bProducts,\r\n  cProducts\r\n} from '../../reducers/admin-count-actions';\r\nimport adminCss from './admin.css';\r\n\r\n// Table Info\r\n\r\nlet rowsS = [];\r\nlet rowsB = [];\r\nlet rowP = [];\r\n\r\nexport function Admin(props) {\r\n  const [keys, setKeys] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [openU, setOpenU] = useState(false);\r\n  const [openP, setOpenP] = useState(false);\r\n  const [category, setCategory] = useState('');\r\n  const [users, setUsers] = useState(0);\r\n  const [products, setProducts] = useState(0);\r\n  const [active, setActive] = useState('');\r\n  const [page1, setPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [userId, setUserId] = useState(0);\r\n  const [productId, setProductId] = useState(0);\r\n\r\n  // Effect\r\n\r\n  useEffect(async () => {\r\n    let number = await props.numberOfUsers();\r\n    let products = await props.numberOfProducts();\r\n    setUsers(number);\r\n    setProducts(products);\r\n  }, []);\r\n\r\n  // useEffect(async () => {\r\n  //   let pages = await props.everythingFunc(active);\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    rowsS = [];\r\n    rowsB = [];\r\n    rowP = [];\r\n    setKeys(props.info.length ? Object.keys(props.info[0]) : []);\r\n    props.info.forEach((item) => {\r\n      if (item.user_role === 'seller') {\r\n        rowsS.push(\r\n          createSData(\r\n            item.user_name,\r\n            item.user_role,\r\n            item.company_name,\r\n            item.adress,\r\n            item.telephone,\r\n            item.is_activated,\r\n            item.u_id\r\n          )\r\n        );\r\n      } else if (item.user_role === 'buyer') {\r\n        rowsB.push(\r\n          createBData(\r\n            item.user_name,\r\n            item.user_role,\r\n            item.first_name,\r\n            item.last_name,\r\n            item.adress,\r\n            item.telephone,\r\n            item.gender,\r\n            item.card_number ? 'XXXXXXXXXXX' : 'Not Inserted',\r\n            item.is_activated,\r\n            item.u_id\r\n          )\r\n        );\r\n      } else {\r\n        rowP.push(\r\n          createPData(\r\n            item.name,\r\n            item.description,\r\n            item.main_img,\r\n            item.price,\r\n            item.category_name,\r\n            item.company_name,\r\n            item.is_deleted,\r\n            item.id\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }, [props.info]);\r\n\r\n  const classes = useStyles();\r\n\r\n  // Functions\r\n\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n    renderAgain(value);\r\n  };\r\n\r\n  const renderAgain = (pageNumber) => {\r\n    let obj = {\r\n      target: {\r\n        innerHTML: active\r\n      }\r\n    };\r\n    switch (active) {\r\n      case 'Sellers':\r\n        handleAllSellers(obj, pageNumber);\r\n        break;\r\n      case 'Active Sellers':\r\n        handleAllActiveSeller(obj, pageNumber);\r\n        break;\r\n      case 'Deactivate Sellers':\r\n        handleAllDeActiveSeller(obj, pageNumber);\r\n        break;\r\n      case 'Buyers':\r\n        handleAllBuyers(obj, pageNumber);\r\n        break;\r\n      case 'Active Buyers':\r\n        handleAllActiveBuyers(obj, pageNumber);\r\n        break;\r\n      case 'Deactivate Buyers':\r\n        handleAllDeActiveBuyers(obj, pageNumber);\r\n        break;\r\n      case 'Products':\r\n        handleAllProducts(obj, pageNumber);\r\n        break;\r\n      case 'Deleted Products':\r\n        handleDeletedProducts(obj, pageNumber);\r\n        break;\r\n      case 'Active Products':\r\n        handleActiveProducts(obj, pageNumber);\r\n        break;\r\n      case 'Bough Products':\r\n        handleBoughtProducts(obj, pageNumber);\r\n        break;\r\n      case 'In Cart/Not Bought Products':\r\n        handleCartProducts(obj, pageNumber);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleClickOpen = (e) => {\r\n    setOpen(true);\r\n  };\r\n  const handleClickOpenP = (e) => {\r\n    setOpenP(true);\r\n  };\r\n  const handleClickOpenU = (e) => {\r\n    setOpenU(true);\r\n  };\r\n\r\n  const handleClose = (e) => {\r\n    setOpen(false);\r\n    setOpenU(false);\r\n    setOpenP(false);\r\n  };\r\n\r\n  const handleStates = (number, name) => {\r\n    setCount(Math.ceil(number / 10));\r\n    if (name !== active) {\r\n      setPage(1);\r\n    }\r\n  };\r\n\r\n  const handleAllSellers = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allSellers(page);\r\n    let number = await props.sellers();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleAllActiveSeller = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allActiveSellers(page);\r\n    let number = await props.aSellers();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleAllDeActiveSeller = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allDeActiveSellers(page);\r\n    let number = await props.dSellers();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleAllBuyers = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allBuyers(page);\r\n    let number = await props.buyers();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleAllActiveBuyers = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allActiveBuyers(page);\r\n    let number = await props.aBuyers();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleAllDeActiveBuyers = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allDeActiveBuyers(page);\r\n    let number = await props.dBuyers();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n  const handleAllProducts = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allProducts(page);\r\n    let number = await props.products();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleDeletedProducts = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allDProducts(page);\r\n    let number = await props.dProducts();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleActiveProducts = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allAProducts(page);\r\n    let number = await props.aProducts();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleBoughtProducts = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allBProducts(page);\r\n    let number = await props.bProducts();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleCartProducts = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.allCProducts(page);\r\n    let number = await props.cProducts();\r\n    handleStates(number, e.target.innerHTML);\r\n  };\r\n\r\n  const handleFavProducts = () => {};\r\n\r\n  const handleAddCategory = async (e, page = 1) => {\r\n    setActive(e.target.innerHTML);\r\n    props.addCategory(category);\r\n  };\r\n\r\n  const handleToggleProduct = () => {\r\n    props.toggleProduct(productId);\r\n  };\r\n\r\n  const handleToggleUser = () => {\r\n    props.toggleUser(userId);\r\n  };\r\n\r\n  const cards = () => {\r\n    return (\r\n      <>\r\n        <Card text='dark' bg='danger' style={{ width: '18rem' }}>\r\n          <Card.Body>\r\n            <Card.Title>Number Of users</Card.Title>\r\n            <Card.Text className='number'>{users}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <Card text='dark' bg='warning' style={{ width: '18rem' }}>\r\n          <Card.Body>\r\n            <Card.Title>Number Of Products</Card.Title>\r\n            <Card.Text className='number'>{products}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <Card text='dark' bg='info' style={{ width: '18rem' }}>\r\n          <Card.Body>\r\n            <Card.Title>Card Title</Card.Title>\r\n            <Card.Text className='number'>{users}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const generateList = () => {\r\n    return (\r\n      <Grid item xs={12}>\r\n        <ListItem button>\r\n          <Avatar className={classes.purple}>A</Avatar>\r\n          <ListItemText primary='Anthign' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllSellers(e)}>\r\n          <ListItemText secondary='Sellers' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllActiveSeller(e)}>\r\n          <ListItemText secondary='Active Sellers' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllDeActiveSeller(e)}>\r\n          <ListItemText secondary='Deactivate Sellers' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllBuyers(e)}>\r\n          <ListItemText secondary='Buyers' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllActiveBuyers(e)}>\r\n          <ListItemText secondary='Active Buyers' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllDeActiveBuyers(e)}>\r\n          <ListItemText secondary='Deactivate Buyers' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleAllProducts(e)}>\r\n          <ListItemText secondary='Products' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleDeletedProducts(e)}>\r\n          <ListItemText secondary='Deleted Products' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleActiveProducts(e)}>\r\n          <ListItemText secondary='Active Products' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleBoughtProducts(e)}>\r\n          <ListItemText secondary='Bough Products' />\r\n          <Divider />\r\n        </ListItem>\r\n        <ListItem button onClick={(e) => handleCartProducts(e)}>\r\n          <ListItemText secondary='In Cart/Not Bought Products' />\r\n          <Divider />\r\n        </ListItem>\r\n      </Grid>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ position: 'absolute', top: 70, right: 30 }}>\r\n        <Tooltip title='Add Category'>\r\n          <Fab color='primary' aria-label='add'>\r\n            <AddIcon onClick={handleClickOpen} />\r\n          </Fab>\r\n        </Tooltip>\r\n        <Tooltip title='Toggle User'>\r\n          <Fab color='primary' aria-label='add'>\r\n            <AccountCircleIcon onClick={handleClickOpenU} />\r\n          </Fab>\r\n        </Tooltip>\r\n        <Tooltip title='Toggle Product'>\r\n          <Fab color='primary' aria-label='add'>\r\n            <EditIcon onClick={handleClickOpenP} />\r\n          </Fab>\r\n        </Tooltip>\r\n      </div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n      >\r\n        <DialogTitle id='form-dialog-title'>Adding Category</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>Adding New Category</DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            label='Category Name'\r\n            type='email'\r\n            fullWidth\r\n            onChange={(e) => setCategory(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => handleAddCategory()} color='primary'>\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Dialog\r\n        open={openU}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n      >\r\n        <DialogTitle id='form-dialog-title'>Toggle Users</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please get the user id from the table to change it's status\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            label='User ID'\r\n            type='email'\r\n            fullWidth\r\n            onChange={(e) => setUserId(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => handleToggleUser()} color='primary'>\r\n            Toggle\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        open={openP}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n      >\r\n        <DialogTitle id='form-dialog-title'>Toggle Products</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please get the product id from the table to change it's status\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            label='Product ID'\r\n            type='email'\r\n            fullWidth\r\n            onChange={(e) => setProductId(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => handleToggleProduct()} color='primary'>\r\n            Toggle\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Grid\r\n        xs={12}\r\n        container\r\n        direction='row'\r\n        justify='space-between'\r\n        alignItems='flex-start'\r\n      >\r\n        <Grid\r\n          lg={2}\r\n          xs={12}\r\n          container\r\n          direction='column'\r\n          justify='space-between'\r\n          alignItems='flex-start'\r\n        >\r\n          {generateList()}\r\n        </Grid>\r\n        <Grid\r\n          lg={10}\r\n          xs={12}\r\n          container\r\n          direction='column'\r\n          justify='space-between'\r\n          alignItems='flex-start'\r\n        >\r\n          <Grid\r\n            xs={12}\r\n            container\r\n            direction='row'\r\n            justify='space-around'\r\n            alignItems='center'\r\n            style={{ marginBottom: 20 }}\r\n          >\r\n            {cards()}\r\n          </Grid>\r\n\r\n          <Grid item xs={12} container direction='row'>\r\n            <TableContainer style={{ marginRight: 15 }} component={Paper}>\r\n              <Table className={classes.table} aria-label='customized table'>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {keys.map((key) => {\r\n                      return (\r\n                        <StyledTableCell align='center' key={key}>\r\n                          {key.toUpperCase()}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <If condition={rowsS.length}>\r\n                    <Then>\r\n                      {rowsS.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                          <StyledTableCell\r\n                            align='center'\r\n                            component='th'\r\n                            scope='row'\r\n                          >\r\n                            {row.name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.role}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.company}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.address}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.telephone}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.active ? 'Activated' : 'Deactivated'}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align='center'>\r\n                            {row.id}\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                      <StyledTableCell colSpan={keys.length} align='center'>\r\n                        <div className={classes.pagination}>\r\n                          <Pagination\r\n                            count={count}\r\n                            page={page1}\r\n                            onChange={handleChange}\r\n                          />\r\n                        </div>\r\n                      </StyledTableCell>\r\n                    </Then>\r\n\r\n                    <Else>\r\n                      <If condition={rowsB.length}>\r\n                        <Then>\r\n                          {rowsB.map((row) => (\r\n                            <StyledTableRow key={row.name}>\r\n                              <StyledTableCell\r\n                                align='center'\r\n                                component='th'\r\n                                scope='row'\r\n                              >\r\n                                {row.name}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.role}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.first_name}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.last_name}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.address}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.telephone}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.gender}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.card_number}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.active ? 'Activated' : 'Deactivated'}\r\n                              </StyledTableCell>\r\n                              <StyledTableCell align='center'>\r\n                                {row.id}\r\n                              </StyledTableCell>\r\n                            </StyledTableRow>\r\n                          ))}\r\n                          <StyledTableCell colSpan={keys.length} align='center'>\r\n                            <div className={classes.pagination}>\r\n                              <Pagination\r\n                                count={count}\r\n                                page={page1}\r\n                                onChange={handleChange}\r\n                              />\r\n                            </div>\r\n                          </StyledTableCell>\r\n                        </Then>\r\n                        <Else>\r\n                          <If condition={rowP.length}>\r\n                            <Then>\r\n                              {rowP.map((row) => (\r\n                                <StyledTableRow key={row.name}>\r\n                                  <StyledTableCell\r\n                                    align='center'\r\n                                    component='th'\r\n                                    scope='row'\r\n                                  >\r\n                                    {row.name}\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    {row.description}\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    <Avatar\r\n                                      alt='Product Image'\r\n                                      src={row.main_img}\r\n                                      className={classes.large}\r\n                                    />\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    {row.price} $\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    {row.category_name}\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    {row.company_name}\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    {row.deleted ? 'Deactivated' : 'Activated'}\r\n                                  </StyledTableCell>\r\n                                  <StyledTableCell align='center'>\r\n                                    {row.id}\r\n                                  </StyledTableCell>\r\n                                </StyledTableRow>\r\n                              ))}\r\n                              <StyledTableCell\r\n                                colSpan={keys.length}\r\n                                align='center'\r\n                              >\r\n                                <div className={classes.pagination}>\r\n                                  <Pagination\r\n                                    count={count}\r\n                                    page={page1}\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </div>\r\n                              </StyledTableCell>\r\n                            </Then>\r\n                          </If>\r\n                        </Else>\r\n                      </If>\r\n                    </Else>\r\n                  </If>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary\r\n  },\r\n  table: {\r\n    minWidth: 700\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7)\r\n  },\r\n  purple: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n    marginRight: 5\r\n  },\r\n  list: {\r\n    padding: 5\r\n  },\r\n  number: {\r\n    fontSize: 60,\r\n    textAlign: 'center'\r\n  },\r\n  pagination: {\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2)\r\n    }\r\n  }\r\n}));\r\n\r\n// Table Functions\r\nfunction createSData(name, role, company, address, telephone, active, id) {\r\n  return { name, role, company, address, telephone, active, id };\r\n}\r\n\r\nfunction createPData(\r\n  name,\r\n  description,\r\n  main_img,\r\n  price,\r\n  category_name,\r\n  company_name,\r\n  deleted,\r\n  id\r\n) {\r\n  return {\r\n    name,\r\n    description,\r\n    main_img,\r\n    price,\r\n    category_name,\r\n    company_name,\r\n    deleted,\r\n    id\r\n  };\r\n}\r\n\r\nfunction createBData(\r\n  name,\r\n  role,\r\n  first_name,\r\n  last_name,\r\n  address,\r\n  telephone,\r\n  gender,\r\n  card_number,\r\n  active,\r\n  id\r\n) {\r\n  return {\r\n    name,\r\n    role,\r\n    first_name,\r\n    last_name,\r\n    address,\r\n    telephone,\r\n    gender,\r\n    card_number,\r\n    active,\r\n    id\r\n  };\r\n}\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white\r\n  },\r\n  body: {\r\n    fontSize: 14\r\n  }\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover\r\n    }\r\n  }\r\n}))(TableRow);\r\n\r\n// Cards function\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    info: state.admin.information\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  allSellers,\r\n  allActiveSellers,\r\n  allDeActiveSellers,\r\n  allBuyers,\r\n  allActiveBuyers,\r\n  allDeActiveBuyers,\r\n  allProducts,\r\n  allDProducts,\r\n  allAProducts,\r\n  allBProducts,\r\n  allCProducts,\r\n  addCategory,\r\n  numberOfUsers,\r\n  numberOfProducts,\r\n  toggleUser,\r\n  toggleProduct,\r\n  sellers,\r\n  dSellers,\r\n  aSellers,\r\n  buyers,\r\n  aBuyers,\r\n  dBuyers,\r\n  products,\r\n  dProducts,\r\n  aProducts,\r\n  bProducts,\r\n  cProducts\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\favorite\\favorite.js",["188","189","190"],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\singleProduct\\singleProduct.js",["191","192","193","194","195","196"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useContext, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CssBaseline, Container } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { getProductDetails } from '../../reducers/product-action ';\r\nimport { StateContext } from '../../context/global-state';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n// import tileData from './tileData';\r\n\r\nexport function ProductDetails(props) {\r\n  const classes = useStyles();\r\n  console.log('props inside the one product page', props.selectedProduct);\r\n  // Context\r\n\r\n  // State\r\n\r\n  // Functions\r\n\r\n  useEffect(() => {\r\n    props.getProductDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {props.selectedProduct.map((product) => {\r\n        return (\r\n          <>\r\n            <div className={classes.root}>\r\n              <GridListTile className={classes.mainImage} key={product.id}>\r\n                <img src={product.main_img} alt={product.name} />\r\n              </GridListTile>\r\n            </div>\r\n            <div className={classes.root}>\r\n              <GridList className={classes.gridList} cols={1.5}>\r\n                {product.images.map((tile) => (\r\n                  <GridListTile key={tile}>\r\n                    <img src={tile} alt={tile} />\r\n                    <GridListTileBar\r\n                      title={tile}\r\n                      classes={{\r\n                        root: classes.titleBar,\r\n                        title: classes.title,\r\n                      }}\r\n                      actionIcon={\r\n                        <IconButton aria-label={`star ${product.name}`}>\r\n                          <StarBorderIcon className={classes.title} />\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                ))}\r\n              </GridList>\r\n            </div>\r\n          </>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainImage: {\r\n    display: 'flex',\r\n    direction: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    height: 400,\r\n    width: 400,\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n  titleBar: {\r\n    background:\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedProduct: state.products.selectedProduct,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { getProductDetails };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDetails);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\context\\global-state.js",["197","198"],"import React, { useState } from 'react';\r\nimport superagent from 'superagent';\r\nimport jwt from 'jsonwebtoken';\r\nimport cookie from 'react-cookies';\r\n\r\nexport const StateContext = React.createContext();\r\nconst JWT_SECRET = 'thebestsecrett';\r\n\r\nconst API_LINK = 'https://sportopiav1.herokuapp.com';\r\n\r\nexport default function GlobalState(props) {\r\n  // State\r\n  const [isLogged, setIsLogged] = useState(false);\r\n  const [token, setToken] = useState('');\r\n  const [user, setUser] = useState({});\r\n  const [productId, setProductId] = useState('');\r\n  const [singleProductId, setSingleProductId] = useState('');\r\n  const [productIdBidding, setProductIdBidding] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  // Functions\r\n\r\n  const login = async (username, password) => {\r\n    let ua1 = superagent.agent();\r\n    try {\r\n      const response = await ua1\r\n        .post(`${API_LINK}/signin`)\r\n        .set('authorization', `Basic ${btoa(`${username}:${password}`)}`)\r\n        .end(function (err, res) {\r\n          // console.log(res);\r\n          try {\r\n            let token = JSON.parse(res.text);\r\n            validateToken(token);\r\n          } catch (error) {\r\n            setError(res.text);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const validateToken = (token) => {\r\n    try {\r\n      token = token.token;\r\n      console.log(token);\r\n      let user = jwt.verify(token, JWT_SECRET);\r\n      cookie.save('token', token, { path: '/', maxAge: 2592000 });\r\n      cookie.save('user', user.user_id, { path: '/', maxAge: 2592000 });\r\n      setLoginState(true, token, user);\r\n    } catch (e) {\r\n      setError('Wrong password or username');\r\n      setLoginState(false, null, {});\r\n    }\r\n  };\r\n\r\n  const register = async (obj) => {\r\n    try {\r\n      const response = await superagent.post(`${API_LINK}/signup`).send(obj);\r\n      console.log('we are here', response.body);\r\n      if (response.body.message === 'This username already used') {\r\n        setError(response.body.message);\r\n      } else {\r\n        if (obj.role === 'seller') {\r\n          setSuccess(\r\n            'Your registered as a Seller, Please wait 1-2 days to be activated'\r\n          );\r\n        } else {\r\n          setSuccess(\r\n            'You have registered as a Buyer Please sign with you account!!'\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setError(\r\n        'Something Went Bad, Please try again later!! Thank you for understanding'\r\n      );\r\n      console.log('baaaaad');\r\n    }\r\n  };\r\n\r\n  const setLoginState = (loggedIn, token, user) => {\r\n    console.log('inside the state', user);\r\n    setIsLogged(loggedIn);\r\n    setToken(token);\r\n    setUser(user);\r\n  };\r\n\r\n  const state = {\r\n    isLogged,\r\n    setIsLogged,\r\n    user,\r\n    setUser,\r\n    productId,\r\n    singleProductId,\r\n    setProductId,\r\n    productIdBidding,\r\n    setProductIdBidding,\r\n    setSingleProductId,\r\n    login,\r\n    register,\r\n    error,\r\n    success,\r\n    setSuccess,\r\n    setError,\r\n  };\r\n  return (\r\n    <StateContext.Provider value={state}>\r\n      {props.children}\r\n    </StateContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\products-reducer.js",["199"],"import cookies from 'react-cookies';\r\n\r\nlet initialState = {\r\n  results: [],\r\n  activeProducts: [],\r\n  selectedProduct: []\r\n};\r\nlet cId = cookies.load('cId');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case 'GET_P':\r\n      return {\r\n        results: payload,\r\n        selectedProduct: state.selectedProduct,\r\n        activeProducts: payload\r\n      };\r\n    case 'ACTIVE':\r\n      let filterdProducts = state.results.filter(\r\n        (product) => product.category_id === payload\r\n      );\r\n      return {\r\n        results: state.results,\r\n        activeProducts: filterdProducts,\r\n        selectedProduct: state.selectedProduct\r\n      };\r\n    case 'DEC-Stock':\r\n      state.results.forEach((item) => {\r\n        console.log('DEC_STOCK', item);\r\n        if (item.name === payload.name) item.inStock--;\r\n      });\r\n      return { ...state };\r\n\r\n    case 'INC-Stock':\r\n      state.results.forEach((item) => {\r\n        if (item.name === payload.name) item.inStock++;\r\n      });\r\n      return { ...state };\r\n    case 'GetSingleProductID':\r\n      return {\r\n        results: state.results,\r\n        selectedProduct: payload,\r\n        activeProducts: state.activeProducts\r\n      };\r\n\r\n    default:\r\n      return {\r\n        results: state.results,\r\n        selectedProduct: state.selectedProduct,\r\n        activeProducts: state.activeProducts\r\n      };\r\n  }\r\n};\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\cart-reducer.js",["200"],"let initialState = {\r\n    cartItem: [],\r\n    count: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case 'GET-CART':\r\n\r\n            // console.log('payloaaaad--GET cart', payload)\r\n            // payload.forEach(element => {\r\n                // console.log('element >',element);\r\n                // if(state.cartItem.length < 3){\r\n                // state.cartItem.push(element)\r\n                // }\r\n            //   });\r\n            return {\r\n                cartItem: payload,\r\n                count: 0\r\n            }\r\n\r\n        case 'ADD-CART':\r\n\r\n         state.cartItem.push(payload);\r\n            return { ...state };\r\n\r\n        case 'REMOVE-CART':\r\n            state.cartItem.splice(payload, 1);\r\n            return {\r\n                cartItem: payload,\r\n                count: 0\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\categories-reducer.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\favorite-reducer.js",["201"],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\seller-reducer.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\admin_reducer.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\bidding\\bidding-main.js",["202","203","204"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getBiddingItems } from '../../reducers/actions';\r\nimport { StateContext } from '../../context/global-state';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport cookies from 'react-cookies';\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardActionArea,\r\n  Button,\r\n  CardContent,\r\n  CardActions,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Slide,\r\n  Typography,\r\n  Grid\r\n} from '@material-ui/core';\r\n\r\nexport function BiddingMain(props) {\r\n  const classes = useStyles();\r\n\r\n  // Context\r\n  const { setProductIdBidding } = useContext(StateContext);\r\n  //   States\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // Functions\r\n  useEffect(() => {\r\n    props.getBiddingItems();\r\n  }, []);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // Save the product id in the cookies\r\n  // const saveProductId = (p_id) => {\r\n  // cookies.save('b_id', p_id);\r\n  // setProductIdBidding(p_id);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <div className={classes.container}>\r\n          {props.products.map((product) => {\r\n            return (\r\n              <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                <Card className={classes.root}>\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      className={classes.media}\r\n                      image={product.main_img}\r\n                      title='Contemplative Reptile'\r\n                    />\r\n                    <CardContent>\r\n                      <Typography gutterBottom variant='h5' component='h2'>\r\n                        {product.name}\r\n                      </Typography>\r\n                      <Typography\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {product.description}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Link\r\n                      to={() => `/bidding/${product.id}`}\r\n                      params={{ productId: product.id }}\r\n                    >\r\n                      <Button\r\n                        // onClick={() => saveProductId(product.id)}\r\n                        size='small'\r\n                        color='primary'\r\n                      >\r\n                        Enter Bidding Room\r\n                      </Button>\r\n                    </Link>\r\n                    <Button\r\n                      onClick={handleClickOpen}\r\n                      size='small'\r\n                      color='primary'\r\n                    >\r\n                      Learn More\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n                <Dialog\r\n                  open={open}\r\n                  TransitionComponent={Transition}\r\n                  keepMounted\r\n                  onClose={handleClose}\r\n                  aria-labelledby='alert-dialog-slide-title'\r\n                  aria-describedby='alert-dialog-slide-description'\r\n                >\r\n                  <DialogTitle id='alert-dialog-slide-title'>\r\n                    {\"Use Google's location service?\"}\r\n                  </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText id='alert-dialog-slide-description'>\r\n                      Let Google help apps determine location. This means\r\n                      sending anonymous location data to Google, even when no\r\n                      apps are running.\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color='primary'>\r\n                      OK!\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </div>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n    alignItems: 'space-between'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center'\r\n  },\r\n\r\n  root: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 250\r\n  }\r\n}));\r\n\r\n// Functions\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    products: state.bidding.biddingProducts\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { getBiddingItems };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BiddingMain);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\bidding.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\bidding\\bidding-room.js",["205","206","207","208","209","210","211"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useContext, useState, Component } from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardActionArea,\r\n  Button,\r\n  CardContent,\r\n  CardActions,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Slide,\r\n  Typography,\r\n  Grid\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { getInsideBid, addMessage, typing } from '../../reducers/actions';\r\nimport { StateContext } from '../../context/global-state';\r\nimport SwiftSlider from 'react-swift-slider';\r\nimport io from 'socket.io-client';\r\nimport cookie from 'react-cookies';\r\nimport jwt from 'jsonwebtoken';\r\nimport { getProductDetails } from '../../reducers/product-action ';\r\nimport './chat.css';\r\nconst JWT_SECRET = 'thebestsecrett';\r\n\r\nlet token = cookie.load('token');\r\nconst validateToken = (token) => {\r\n  try {\r\n    let user = jwt.verify(token, JWT_SECRET);\r\n    return user;\r\n  } catch (e) {\r\n    console.log('You have to register100');\r\n  }\r\n};\r\n// get information\r\n\r\nlet user = validateToken(token);\r\nconsole.log(user);\r\nexport function BiddingRoom(props) {\r\n  let array = props.location.pathname.split('/');\r\n  let productId = array[array.length - 1];\r\n  console.log('props in the bidding-room', props);\r\n  const classes = useStyles();\r\n  // Context\r\n\r\n  // State\r\n  const [open, setOpen] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n  // Functions\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // Functions\r\n\r\n  let socket = io('https://sportopiav1.herokuapp.com/bidding');\r\n  // let socket = io('http://localhost:8000/bidding');\r\n\r\n  function updatePrice(uPrice, productId) {\r\n    console.log('first Step ', uPrice, productId);\r\n    socket.emit('updatePrice', {\r\n      price: uPrice,\r\n      productId: productId\r\n    });\r\n  }\r\n\r\n  socket.on('updatePrice', (payload) => {\r\n    setPrice(payload.price.price);\r\n  });\r\n\r\n  useEffect(() => {\r\n    props.getInsideBid(productId);\r\n    socket.emit('join', {\r\n      user: user.user_id,\r\n      productId: productId\r\n    });\r\n    socket.on('username', (payload) => {\r\n      let user = document.getElementById('handle');\r\n      user.value = payload;\r\n    });\r\n\r\n    socket.on('chat', function (data) {\r\n      let para = document.getElementById('feedback');\r\n      para.innerHTML = '';\r\n      props.addMessage(`${data.handle}:${data.message}`);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.productUB.map((item) => setPrice(item.price));\r\n  }, [props.productUB]);\r\n\r\n  socket.on('typing', function (data) {\r\n    let para = document.getElementById('feedback');\r\n    para.innerHTML = '<em>' + data.user + ' is typing a message...</em>';\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    let message = document.getElementById('message');\r\n    let user = document.getElementById('handle');\r\n    socket.emit('chat', {\r\n      message: message.value,\r\n      handle: user.value,\r\n      productId: parseInt(productId)\r\n    });\r\n    if (price < parseInt(message.value)) {\r\n      console.log(message.value);\r\n      setPrice(message.value);\r\n      updatePrice(message.value, productId);\r\n    }\r\n    message.value = '';\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    let user = document.getElementById('handle');\r\n    socket.emit('typing', {\r\n      message: e.target.value,\r\n      productId: productId,\r\n      user: user.value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction='row'\r\n        justify='space-between'\r\n        alignItems='flex-start'\r\n        xs={12}\r\n        lg={10}\r\n        style={{ marginTop: 0, marginBottom: 0 }}\r\n      >\r\n        <Grid\r\n          container\r\n          direction='column'\r\n          justify='center'\r\n          alignItems='center'\r\n          xs={12}\r\n          lg={6}\r\n        >\r\n          <div id='mario-chat'>\r\n            <div id='chat-window'>\r\n              <div id='output'>\r\n                {props.messages.map((message, index) => {\r\n                  return <p key={index}>{message}</p>;\r\n                })}\r\n              </div>\r\n              <p id='feedback'></p>\r\n            </div>\r\n            <input\r\n              username\r\n              class='input'\r\n              id='handle'\r\n              type='text'\r\n              placeholder='Handle'\r\n            />\r\n            <input\r\n              class='input'\r\n              id='message'\r\n              type='text'\r\n              placeholder='Add Your Price'\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n            <button onClick={() => handleSubmit()} id='send'>\r\n              Send\r\n            </button>\r\n          </div>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          direction='column'\r\n          justify='center'\r\n          alignItems='flex-end'\r\n          xs={12}\r\n          lg={6}\r\n        >\r\n          {props.productUB.map((product, index) => {\r\n            return (\r\n              <Grid item xs={12} lg={12}>\r\n                <Card xs={12} lg={12} className={classes.root}>\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      className={classes.media}\r\n                      image={product.main_img}\r\n                      title={product.name}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography gutterBottom variant='h5' component='h2'>\r\n                        {product.name}\r\n                      </Typography>\r\n                      <Typography\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                        gutterBottom\r\n                      >\r\n                        {product.description}\r\n                      </Typography>\r\n                      <h5>\r\n                        {' '}\r\n                        Price: <span id='price'>{price}</span> $\r\n                      </h5>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      onClick={handleClickOpen}\r\n                      size='small'\r\n                      color='primary'\r\n                    >\r\n                      More Info\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n                <Dialog\r\n                  open={open}\r\n                  TransitionComponent={Transition}\r\n                  keepMounted\r\n                  onClose={handleClose}\r\n                  aria-labelledby='alert-dialog-slide-title'\r\n                  aria-describedby='alert-dialog-slide-description'\r\n                >\r\n                  <DialogTitle id='alert-dialog-slide-title'>\r\n                    {'Product Information'}\r\n                  </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText id='alert-dialog-slide-description'>\r\n                      {product.description}\r\n                    </DialogContentText>\r\n                    <DialogContentText id='alert-dialog-slide-description'>\r\n                      {product.start_time}\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color='primary'>\r\n                      OK!\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch'\r\n    }\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n    alignItems: 'space-between'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center'\r\n  },\r\n\r\n  root: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 250\r\n  }\r\n}));\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    productUB: state.bidding.biddingRoom,\r\n    messages: state.bidding.messages,\r\n    typing: state.bidding.typing\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getInsideBid,\r\n  getProductDetails,\r\n  addMessage,\r\n  typing\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BiddingRoom);\r\n","C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\favorit-action.js",["212","213"],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\categories-action.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\cart-action.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\seller_actions.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\admin-count-actions.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\admin_actions.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\auth\\auth.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\if\\if.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\product-action .js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\reducers\\actions.js",[],"C:\\Users\\STD\\desktop\\projects\\ltuc\\401\\front\\sportopia-front\\src\\components\\carousel\\carousel.js",[],{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":3,"column":10,"nodeType":"220","messageId":"221","endLine":3,"endColumn":22},{"ruleId":"218","severity":1,"message":"222","line":2,"column":17,"nodeType":"220","messageId":"221","endLine":2,"endColumn":26},{"ruleId":"218","severity":1,"message":"223","line":26,"column":3,"nodeType":"220","messageId":"221","endLine":26,"endColumn":9},{"ruleId":"218","severity":1,"message":"224","line":32,"column":8,"nodeType":"220","messageId":"221","endLine":32,"endColumn":25},{"ruleId":"218","severity":1,"message":"225","line":88,"column":5,"nodeType":"220","messageId":"221","endLine":88,"endColumn":19},{"ruleId":"218","severity":1,"message":"226","line":183,"column":9,"nodeType":"220","messageId":"221","endLine":183,"endColumn":19},{"ruleId":"218","severity":1,"message":"227","line":3,"column":8,"nodeType":"220","messageId":"221","endLine":3,"endColumn":13},{"ruleId":"218","severity":1,"message":"228","line":4,"column":8,"nodeType":"220","messageId":"221","endLine":4,"endColumn":12},{"ruleId":"218","severity":1,"message":"223","line":6,"column":8,"nodeType":"220","messageId":"221","endLine":6,"endColumn":14},{"ruleId":"229","severity":1,"message":"230","line":42,"column":6,"nodeType":"231","endLine":42,"endColumn":8,"suggestions":"232"},{"ruleId":"218","severity":1,"message":"233","line":6,"column":3,"nodeType":"220","messageId":"221","endLine":6,"endColumn":19},{"ruleId":"229","severity":1,"message":"230","line":71,"column":6,"nodeType":"231","endLine":71,"endColumn":8,"suggestions":"234"},{"ruleId":"235","severity":1,"message":"236","line":80,"column":50,"nodeType":"237","messageId":"238","endLine":80,"endColumn":52},{"ruleId":"218","severity":1,"message":"239","line":48,"column":11,"nodeType":"220","messageId":"221","endLine":48,"endColumn":29},{"ruleId":"218","severity":1,"message":"240","line":49,"column":9,"nodeType":"220","messageId":"221","endLine":49,"endColumn":26},{"ruleId":"235","severity":1,"message":"236","line":62,"column":39,"nodeType":"237","messageId":"238","endLine":62,"endColumn":41},{"ruleId":"218","severity":1,"message":"241","line":45,"column":10,"nodeType":"220","messageId":"221","endLine":45,"endColumn":16},{"ruleId":"218","severity":1,"message":"242","line":45,"column":18,"nodeType":"220","messageId":"221","endLine":45,"endColumn":31},{"ruleId":"218","severity":1,"message":"243","line":5,"column":20,"nodeType":"220","messageId":"221","endLine":5,"endColumn":24},{"ruleId":"218","severity":1,"message":"244","line":34,"column":3,"nodeType":"220","messageId":"221","endLine":34,"endColumn":13},{"ruleId":"218","severity":1,"message":"245","line":51,"column":19,"nodeType":"220","messageId":"221","endLine":51,"endColumn":29},{"ruleId":"218","severity":1,"message":"246","line":2,"column":17,"nodeType":"220","messageId":"221","endLine":2,"endColumn":27},{"ruleId":"218","severity":1,"message":"247","line":3,"column":10,"nodeType":"220","messageId":"221","endLine":3,"endColumn":22},{"ruleId":"218","severity":1,"message":"248","line":7,"column":16,"nodeType":"220","messageId":"221","endLine":7,"endColumn":19},{"ruleId":"218","severity":1,"message":"249","line":7,"column":21,"nodeType":"220","messageId":"221","endLine":7,"endColumn":24},{"ruleId":"218","severity":1,"message":"250","line":7,"column":26,"nodeType":"220","messageId":"221","endLine":7,"endColumn":34},{"ruleId":"218","severity":1,"message":"251","line":8,"column":8,"nodeType":"220","messageId":"221","endLine":8,"endColumn":18},{"ruleId":"218","severity":1,"message":"252","line":70,"column":8,"nodeType":"220","messageId":"221","endLine":70,"endColumn":16},{"ruleId":"218","severity":1,"message":"253","line":309,"column":9,"nodeType":"220","messageId":"221","endLine":309,"endColumn":26},{"ruleId":"218","severity":1,"message":"233","line":6,"column":5,"nodeType":"220","messageId":"221","endLine":6,"endColumn":21},{"ruleId":"229","severity":1,"message":"230","line":62,"column":8,"nodeType":"231","endLine":62,"endColumn":10,"suggestions":"254"},{"ruleId":"235","severity":1,"message":"236","line":73,"column":62,"nodeType":"237","messageId":"238","endLine":73,"endColumn":64},{"ruleId":"218","severity":1,"message":"246","line":2,"column":28,"nodeType":"220","messageId":"221","endLine":2,"endColumn":38},{"ruleId":"218","severity":1,"message":"255","line":2,"column":40,"nodeType":"220","messageId":"221","endLine":2,"endColumn":48},{"ruleId":"218","severity":1,"message":"256","line":4,"column":10,"nodeType":"220","messageId":"221","endLine":4,"endColumn":21},{"ruleId":"218","severity":1,"message":"257","line":4,"column":23,"nodeType":"220","messageId":"221","endLine":4,"endColumn":32},{"ruleId":"218","severity":1,"message":"247","line":7,"column":10,"nodeType":"220","messageId":"221","endLine":7,"endColumn":22},{"ruleId":"218","severity":1,"message":"258","line":8,"column":8,"nodeType":"220","messageId":"221","endLine":8,"endColumn":17},{"ruleId":"218","severity":1,"message":"259","line":14,"column":10,"nodeType":"220","messageId":"221","endLine":14,"endColumn":15},{"ruleId":"218","severity":1,"message":"260","line":27,"column":13,"nodeType":"220","messageId":"221","endLine":27,"endColumn":21},{"ruleId":"218","severity":1,"message":"261","line":8,"column":5,"nodeType":"220","messageId":"221","endLine":8,"endColumn":8},{"ruleId":"262","severity":1,"message":"263","line":6,"column":1,"nodeType":"264","endLine":39,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":6,"column":1,"nodeType":"264","endLine":33,"endColumn":2},{"ruleId":"218","severity":1,"message":"265","line":7,"column":10,"nodeType":"220","messageId":"221","endLine":7,"endColumn":17},{"ruleId":"218","severity":1,"message":"266","line":8,"column":8,"nodeType":"220","messageId":"221","endLine":8,"endColumn":15},{"ruleId":"218","severity":1,"message":"267","line":30,"column":11,"nodeType":"220","messageId":"221","endLine":30,"endColumn":30},{"ruleId":"218","severity":1,"message":"246","line":2,"column":28,"nodeType":"220","messageId":"221","endLine":2,"endColumn":38},{"ruleId":"218","severity":1,"message":"222","line":2,"column":50,"nodeType":"220","messageId":"221","endLine":2,"endColumn":59},{"ruleId":"218","severity":1,"message":"265","line":3,"column":10,"nodeType":"220","messageId":"221","endLine":3,"endColumn":17},{"ruleId":"218","severity":1,"message":"268","line":3,"column":19,"nodeType":"220","messageId":"221","endLine":3,"endColumn":23},{"ruleId":"218","severity":1,"message":"247","line":23,"column":10,"nodeType":"220","messageId":"221","endLine":23,"endColumn":22},{"ruleId":"218","severity":1,"message":"269","line":24,"column":8,"nodeType":"220","messageId":"221","endLine":24,"endColumn":19},{"ruleId":"270","severity":1,"message":"271","line":281,"column":3,"nodeType":"272","messageId":"273","endLine":281,"endColumn":7},{"ruleId":"218","severity":1,"message":"274","line":3,"column":8,"nodeType":"220","messageId":"221","endLine":3,"endColumn":13},{"ruleId":"275","severity":2,"message":"276","line":51,"column":9,"nodeType":"220","messageId":"277","endLine":51,"endColumn":17},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"no-unused-vars","'EachCategory' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Button' is defined but never used.","'NotificationsIcon' is defined but never used.","'notDeletedCart' is assigned a value but never used.","'renderMenu' is assigned a value but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["280"],"'updateRemoteCart' is defined but never used.",["281"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setSingleProductId' is assigned a value but never used.","'selectedProductId' is assigned a value but never used.","'logged' is assigned a value but never used.","'setLoginState' is assigned a value but never used.","'Else' is defined but never used.","'Typography' is defined but never used.","'setProduct' is assigned a value but never used.","'useContext' is defined but never used.","'StateContext' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'PageItem' is defined but never used.","'CreateIcon' is defined but never used.","'adminCss' is defined but never used.","'handleFavProducts' is assigned a value but never used.",["282"],"'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Container' is defined but never used.","'CardMedia' is defined but never used.","'token' is assigned a value but never used.","'response' is assigned a value but never used.","'cId' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'NavLink' is defined but never used.","'cookies' is defined but never used.","'setProductIdBidding' is assigned a value but never used.","'Link' is defined but never used.","'SwiftSlider' is defined but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","'axios' is defined but never used.","no-undef","'dispatch' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"283","fix":"284"},{"desc":"283","fix":"285"},{"desc":"283","fix":"286"},"Update the dependencies array to be: [props]",{"range":"287","text":"288"},{"range":"289","text":"288"},{"range":"290","text":"288"},[1461,1463],"[props]",[1266,1268],[1337,1339]]